{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nexport default {\n  name: 'SearchComponent',\n  data() {\n    return {\n      query: '',\n      answer: '',\n      sources: [],\n      error: '',\n      loading: false\n    };\n  },\n  computed: {\n    formattedAnswer() {\n      return this.answer.replace(/\\n/g, '<br>');\n    }\n  },\n  methods: {\n    async search() {\n      if (!this.query.trim()) {\n        this.error = 'Please enter a search query.';\n        return;\n      }\n      this.loading = true;\n      this.error = '';\n      this.answer = '';\n      this.sources = [];\n      try {\n        console.log('Sending search request for:', this.query);\n        const response = await axios.post('http://localhost:3000/search', {\n          query: this.query\n        });\n        console.log('Received response:', response.data);\n        this.answer = response.data.summary;\n        this.extractSources();\n      } catch (error) {\n        console.error('Error:', error);\n        this.error = error.response ? error.response.data.details : error.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    extractSources() {\n      const sourceRegex = /\\[([^\\]]+)\\]\\(([^)]+)\\)/g;\n      let match;\n      const sources = new Set();\n      while ((match = sourceRegex.exec(this.answer)) !== null) {\n        const [, title, url] = match;\n        sources.add({\n          title,\n          url\n        });\n      }\n      this.sources = Array.from(sources).map(source => ({\n        ...source,\n        favicon: `https://www.google.com/s2/favicons?domain=${new URL(source.url).hostname}&sz=32`\n      }));\n\n      // Remove source links from the answer\n      this.answer = this.answer.replace(sourceRegex, '$1');\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","query","answer","sources","error","loading","computed","formattedAnswer","replace","methods","search","trim","console","log","response","post","summary","extractSources","details","message","sourceRegex","match","Set","exec","title","url","add","Array","from","map","source","favicon","URL","hostname"],"sources":["/home/kabir/code/madebyDeepseek/ai-search-engine/src/components/Search.vue"],"sourcesContent":["<template>\n  <div class=\"search-container\">\n    <input v-model=\"query\" @keyup.enter=\"search\" placeholder=\"Enter your search query\" class=\"search-input\">\n    <button @click=\"search\" class=\"search-button\">Search</button>\n    <div v-if=\"loading\" class=\"loading\">Searching...</div>\n    <div v-if=\"answer\" class=\"answer-container\">\n      <h3>Answer:</h3>\n      <div v-html=\"formattedAnswer\"></div>\n      <h4>Sources:</h4>\n      <ul class=\"sources-list\">\n        <li v-for=\"(source, index) in sources\" :key=\"index\">\n          <img :src=\"source.favicon\" :alt=\"source.title\" class=\"favicon\">\n          <a :href=\"source.url\" target=\"_blank\" rel=\"noopener noreferrer\">{{ source.title }}</a>\n        </li>\n      </ul>\n    </div>\n    <div v-if=\"error\" class=\"error-message\">\n      <h3>Error:</h3>\n      <p>{{ error }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  name: 'SearchComponent',\n  data() {\n    return {\n      query: '',\n      answer: '',\n      sources: [],\n      error: '',\n      loading: false\n    }\n  },\n  computed: {\n    formattedAnswer() {\n      return this.answer.replace(/\\n/g, '<br>');\n    }\n  },\n  methods: {\n    async search() {\n      if (!this.query.trim()) {\n        this.error = 'Please enter a search query.';\n        return;\n      }\n\n      this.loading = true;\n      this.error = '';\n      this.answer = '';\n      this.sources = [];\n\n      try {\n        console.log('Sending search request for:', this.query);\n\n        const response = await axios.post('http://localhost:3000/search', { query: this.query });\n        console.log('Received response:', response.data);\n\n        this.answer = response.data.summary;\n        this.extractSources();\n      } catch (error) {\n        console.error('Error:', error);\n\n        this.error = error.response ? error.response.data.details : error.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    extractSources() {\n      const sourceRegex = /\\[([^\\]]+)\\]\\(([^)]+)\\)/g;\n      let match;\n      const sources = new Set();\n\n      while ((match = sourceRegex.exec(this.answer)) !== null) {\n        const [, title, url] = match;\n        sources.add({ title, url });\n      }\n\n      this.sources = Array.from(sources).map(source => ({\n        ...source,\n        favicon: `https://www.google.com/s2/favicons?domain=${new URL(source.url).hostname}&sz=32`\n      }));\n\n      // Remove source links from the answer\n      this.answer = this.answer.replace(sourceRegex, '$1');\n    }\n  }\n}\n</script>\n\n<style scoped>\n.search-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.search-input {\n  width: 70%;\n  padding: 10px;\n  font-size: 16px;\n}\n\n.search-button {\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.answer-container {\n  margin-top: 20px;\n  background-color: #f5f5f5;\n  padding: 15px;\n  border-radius: 5px;\n}\n\n.answer-container h3, .answer-container h4 {\n  margin-top: 0;\n}\n\n.sources-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n.sources-list li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.favicon {\n  width: 16px;\n  height: 16px;\n  margin-right: 5px;\n}\n\n.error-message {\n  color: red;\n  margin-top: 20px;\n}\n\n.loading {\n  margin-top: 20px;\n  font-style: italic;\n}\n</style>"],"mappings":";;;;;;;;;;AAwBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAI,EAAE,iBAAiB;EACvBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,eAAeA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACL,MAAM,CAACM,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;IAC3C;EACF,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,MAAMA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC,CAAC,EAAE;QACtB,IAAI,CAACP,KAAI,GAAI,8BAA8B;QAC3C;MACF;MAEA,IAAI,CAACC,OAAM,GAAI,IAAI;MACnB,IAAI,CAACD,KAAI,GAAI,EAAE;MACf,IAAI,CAACF,MAAK,GAAI,EAAE;MAChB,IAAI,CAACC,OAAM,GAAI,EAAE;MAEjB,IAAI;QACFS,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAACZ,KAAK,CAAC;QAEtD,MAAMa,QAAO,GAAI,MAAMhB,KAAK,CAACiB,IAAI,CAAC,8BAA8B,EAAE;UAAEd,KAAK,EAAE,IAAI,CAACA;QAAM,CAAC,CAAC;QACxFW,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,QAAQ,CAACd,IAAI,CAAC;QAEhD,IAAI,CAACE,MAAK,GAAIY,QAAQ,CAACd,IAAI,CAACgB,OAAO;QACnC,IAAI,CAACC,cAAc,CAAC,CAAC;MACvB,EAAE,OAAOb,KAAK,EAAE;QACdQ,OAAO,CAACR,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAE9B,IAAI,CAACA,KAAI,GAAIA,KAAK,CAACU,QAAO,GAAIV,KAAK,CAACU,QAAQ,CAACd,IAAI,CAACkB,OAAM,GAAId,KAAK,CAACe,OAAO;MAC3E,UAAU;QACR,IAAI,CAACd,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IACDY,cAAcA,CAAA,EAAG;MACf,MAAMG,WAAU,GAAI,0BAA0B;MAC9C,IAAIC,KAAK;MACT,MAAMlB,OAAM,GAAI,IAAImB,GAAG,CAAC,CAAC;MAEzB,OAAO,CAACD,KAAI,GAAID,WAAW,CAACG,IAAI,CAAC,IAAI,CAACrB,MAAM,CAAC,MAAM,IAAI,EAAE;QACvD,MAAM,GAAGsB,KAAK,EAAEC,GAAG,IAAIJ,KAAK;QAC5BlB,OAAO,CAACuB,GAAG,CAAC;UAAEF,KAAK;UAAEC;QAAI,CAAC,CAAC;MAC7B;MAEA,IAAI,CAACtB,OAAM,GAAIwB,KAAK,CAACC,IAAI,CAACzB,OAAO,CAAC,CAAC0B,GAAG,CAACC,MAAK,KAAM;QAChD,GAAGA,MAAM;QACTC,OAAO,EAAE,6CAA6C,IAAIC,GAAG,CAACF,MAAM,CAACL,GAAG,CAAC,CAACQ,QAAQ;MACpF,CAAC,CAAC,CAAC;;MAEH;MACA,IAAI,CAAC/B,MAAK,GAAI,IAAI,CAACA,MAAM,CAACM,OAAO,CAACY,WAAW,EAAE,IAAI,CAAC;IACtD;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}