{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport { marked } from 'marked';\nexport default {\n  name: 'SearchComponent',\n  data() {\n    return {\n      query: '',\n      answer: '',\n      reasoning: '',\n      sources: [],\n      error: '',\n      loading: false,\n      showReasoning: false\n    };\n  },\n  computed: {\n    formattedAnswer() {\n      return marked(this.answer);\n    },\n    formattedReasoning() {\n      return marked(this.reasoning);\n    }\n  },\n  methods: {\n    async search() {\n      if (!this.query.trim()) {\n        this.error = 'Please enter a search query.';\n        return;\n      }\n      this.loading = true;\n      this.error = '';\n      this.answer = '';\n      this.reasoning = '';\n      this.sources = [];\n      try {\n        const response = await axios.post('http://localhost:3000/search', {\n          query: this.query\n        });\n        this.processResponse(response.data.summary);\n      } catch (error) {\n        console.error('Error:', error);\n        this.error = error.response ? error.response.data.details : error.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    processResponse(summary) {\n      const sections = summary.split('Final Answer:');\n      if (sections.length > 1) {\n        this.reasoning = sections[0].trim();\n        this.answer = sections[1].trim();\n      } else {\n        this.answer = summary;\n      }\n      this.extractSources();\n    },\n    extractSources() {\n      const sourceRegex = /\\[([^\\]]+)\\]\\(([^)]+)\\)/g;\n      let match;\n      const sources = new Set();\n      while ((match = sourceRegex.exec(this.answer)) !== null) {\n        const [, title, url] = match;\n        sources.add({\n          title,\n          url\n        });\n      }\n      this.sources = Array.from(sources).map(source => ({\n        ...source,\n        favicon: `https://www.google.com/s2/favicons?domain=${new URL(source.url).hostname}&sz=32`\n      }));\n\n      // Remove source links from the answer\n      this.answer = this.answer.replace(sourceRegex, '$1');\n    },\n    toggleReasoning() {\n      this.showReasoning = !this.showReasoning;\n    }\n  }\n};","map":{"version":3,"names":["axios","marked","name","data","query","answer","reasoning","sources","error","loading","showReasoning","computed","formattedAnswer","formattedReasoning","methods","search","trim","response","post","processResponse","summary","console","details","message","sections","split","length","extractSources","sourceRegex","match","Set","exec","title","url","add","Array","from","map","source","favicon","URL","hostname","replace","toggleReasoning"],"sources":["/home/kabir/code/madebyDeepseek/ai-search-engine/src/components/Search.vue"],"sourcesContent":["<template>\n  <div class=\"search-container\">\n    <input v-model=\"query\" @keyup.enter=\"search\" placeholder=\"Enter your search query\" class=\"search-input\">\n    <button @click=\"search\" class=\"search-button\">Search</button>\n    <div v-if=\"loading\" class=\"loading\">Searching...</div>\n    <div v-if=\"answer\" class=\"answer-container\">\n      <h3>Answer:</h3>\n      <div v-html=\"formattedAnswer\"></div>\n      <button @click=\"toggleReasoning\" class=\"toggle-reasoning\">\n        {{ showReasoning ? 'Hide Reasoning' : 'Show Reasoning' }}\n      </button>\n      <div v-if=\"showReasoning\" class=\"reasoning\" v-html=\"formattedReasoning\"></div>\n      <h4>Sources:</h4>\n      <ul class=\"sources-list\">\n        <li v-for=\"(source, index) in sources\" :key=\"index\">\n          <img :src=\"source.favicon\" :alt=\"source.title\" class=\"favicon\">\n          <a :href=\"source.url\" target=\"_blank\" rel=\"noopener noreferrer\">{{ source.title }}</a>\n        </li>\n      </ul>\n    </div>\n    <div v-if=\"error\" class=\"error-message\">\n      <h3>Error:</h3>\n      <p>{{ error }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { marked } from 'marked';\n\nexport default {\n  name: 'SearchComponent',\n  data() {\n    return {\n      query: '',\n      answer: '',\n      reasoning: '',\n      sources: [],\n      error: '',\n      loading: false,\n      showReasoning: false\n    }\n  },\n  computed: {\n    formattedAnswer() {\n      return marked(this.answer);\n    },\n    formattedReasoning() {\n      return marked(this.reasoning);\n    }\n  },\n  methods: {\n    async search() {\n      if (!this.query.trim()) {\n        this.error = 'Please enter a search query.';\n        return;\n      }\n\n      this.loading = true;\n      this.error = '';\n      this.answer = '';\n      this.reasoning = '';\n      this.sources = [];\n\n      try {\n        const response = await axios.post('http://localhost:3000/search', { query: this.query });\n        this.processResponse(response.data.summary);\n      } catch (error) {\n        console.error('Error:', error);\n        this.error = error.response ? error.response.data.details : error.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    processResponse(summary) {\n      const sections = summary.split('Final Answer:');\n      if (sections.length > 1) {\n        this.reasoning = sections[0].trim();\n        this.answer = sections[1].trim();\n      } else {\n        this.answer = summary;\n      }\n      this.extractSources();\n    },\n    extractSources() {\n      const sourceRegex = /\\[([^\\]]+)\\]\\(([^)]+)\\)/g;\n      let match;\n      const sources = new Set();\n\n      while ((match = sourceRegex.exec(this.answer)) !== null) {\n        const [, title, url] = match;\n        sources.add({ title, url });\n      }\n\n      this.sources = Array.from(sources).map(source => ({\n        ...source,\n        favicon: `https://www.google.com/s2/favicons?domain=${new URL(source.url).hostname}&sz=32`\n      }));\n\n      // Remove source links from the answer\n      this.answer = this.answer.replace(sourceRegex, '$1');\n    },\n    toggleReasoning() {\n      this.showReasoning = !this.showReasoning;\n    }\n  }\n}\n</script>\n\n<style scoped>\n.search-container {\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.search-input {\n  width: 70%;\n  padding: 10px;\n  font-size: 16px;\n}\n\n.search-button {\n  padding: 10px 20px;\n  font-size: 16px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n}\n\n.answer-container {\n  margin-top: 20px;\n  background-color: #f5f5f5;\n  padding: 15px;\n  border-radius: 5px;\n}\n\n.answer-container h3, .answer-container h4 {\n  margin-top: 0;\n}\n\n.sources-list {\n  list-style-type: none;\n  padding: 0;\n}\n\n.sources-list li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.favicon {\n  width: 16px;\n  height: 16px;\n  margin-right: 5px;\n}\n\n.error-message {\n  color: red;\n  margin-top: 20px;\n}\n\n.loading {\n  margin-top: 20px;\n  font-style: italic;\n}\n\n.toggle-reasoning {\n  margin-top: 10px;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  cursor: pointer;\n  padding: 5px 10px;\n  font-size: 14px;\n}\n\n.reasoning {\n  margin-top: 10px;\n  background-color: #f5f5f5;\n  padding: 10px;\n  border-radius: 5px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}